# vi: ft=zsh

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
#ZSH_THEME="robbyrussell"
if [ -x "$(command -v starship)" ] && [ -f ~/.config/starship.toml ]; then
    export SPACESHIP_EXEC_TIME_SHOW=false
    eval "$(starship init zsh)"
elif [ $TERM != "xterm" ] \
    && [ -f "$HOME/.oh-my-zsh/custom/themes/powerlevel10k/powerlevel10k.zsh-theme" ] \
    && [ -f "$HOME/.p10k.zsh" ]
then
    ZSH_THEME='powerlevel10k/powerlevel10k'
    source "$HOME/.p10k.zsh"
else
    ZSH_THEME="af-magic"
fi

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# Caution: this setting can cause issues with multiline prompts (zsh 5.7.1 and newer seem to work)
# See https://github.com/ohmyzsh/ohmyzsh/issues/5765
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
    1password
    alias-finder aliases archlinux autopep8 aws
    bgnotify branch bun
    catimg colored-man-pages colorize composer copypath cp
    deno dircycle direnv dirhistory docker docker-compose
    emoji emotty encode64 extract eza
    fabric fancy-ctrl-z firewalld fluxcd frontend-search fzf
    gcloud gh git git-auto-fetch git-extras gitfast git-flow git-flow-avh github git-hubflow gitignore gnu-utils golang
    helm heroku history httpie
    iterm2
    jira jsontools
    kubectl kubectx
    macos man mercurial microk8s minikube mise mosh
    nats ng nmap node npm #nvm # DO NOT ADD NPX - SECURITY ISSUES
    pep8 perl perms pip podman postgres pre-commit profiles pyenv pylint python
    qodana qrcode
    react-native redis-cli repo rsync ruby rust
    safe-paste salt screen skaffold starship sudo svn systemadmin systemd
    taskwarrior terraform term_tab tig tmux tmux-cssh tmuxinator toolbox transfer
    ufw universalarchive urltools
    vscode
    wd web-search
    yarn
    z zoxide # zsh-interactive-cd zsh-navigation-tools

    # Custom plugins
    fast-syntax-highlighting 
    # zsh-vi-mode
)

# Configure brew before oh-my-zsh starts
if [ -d /opt/homebrew/bin ]; then
    path=("/opt/homebrew/bin" "$path[@]")
fi

if type brew &>/dev/null; then
    fpath=("$(brew --prefix)/share/zsh/site-functions" "$fpath[@]")
fi

# Python
export VIRTUAL_ENV_DISABLE_PROMPT=true

if [ -d "$HOME/.pyenv/bin" ]; then
    export PYENV_ROOT="$HOME/.pyenv"
    path=("$HOME/.pyenv/bin" "$path[@]")
fi

if type pyenv &>/dev/null; then
    if [ -d "$(pyenv root)/shims" ]; then
        path=("$(pyenv root)/shims" "$path[@]")
    fi
fi

source $ZSH/oh-my-zsh.sh

# User configuration

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
    source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

export TZ=Europe/London

export EDITOR=vim

# if type gdircolors &> /dev/null; then
#     eval "$( gdircolors -b $HOME/.ls_colors/LS_COLORS )"
# else
#     eval "$( dircolors -b $HOME/.ls_colors/LS_COLORS )"
# fi

zstyle ':completion:*' list-colors "${(@s.:.)LS_COLORS}" menu select rehash true
autoload -Uz compinit
compinit -u

typeset -U PATH path

# Add local bin nice and early
if [ -d "$HOME/.local/bin" ]; then
    path=("$HOME/.local/bin" "$path[@]")
fi

if [ -d "$HOME/.local/share/zsh/site-functions/" ]; then
    fpath=("$HOME/.local/share/zsh/site-functions" "$fpath[@]")
fi

# 1password
if [ -f ~/.config/op/plugins.sh ]; then
    source ~/.config/op/plugins.sh

    function __my_op_plugin_run() {
        _op_plugin_run

        for ((i = 2; i < CURRENT; i++)); do
            if [[ ${words[i]} == -- ]]; then
                shift $i words
                ((CURRENT -= i))
                _normal
                return
            fi
        done

    }

    function __load_op_completion() {
        completion_function="$(op completion zsh)"
        sed -E 's/^( +)_op_plugin_run/\1__my_op_plugin_run/' <<<"${completion_function}"
    }

    eval "$(__load_op_completion)"
    compdef _op op
fi

# Atuin
if type atuin &> /dev/null; then
    eval "$(atuin init zsh)"
fi

# FSH
fast-theme XDG:catppuccin-mocha &> /dev/null

# FZF
if [ -f ~/.fzf.zsh ]; then
    source ~/.fzf.zsh
fi

if type fzf &> /dev/null && type bat &>/dev/null; then
    alias fzf="fzf --preview 'bat --color=always --style=numbers --line-range=:500 {}'"
fi

export FZF_DEFAULT_OPTS=" \
    --color=bg+:#313244,bg:#1e1e2e,spinner:#f5e0dc,hl:#f38ba8 \
    --color=fg:#cdd6f4,header:#f38ba8,info:#cba6f7,pointer:#f5e0dc \
    --color=marker:#f5e0dc,fg+:#cdd6f4,prompt:#cba6f7,hl+:#f38ba8"

# ccat
ZSH_COLORIZE_STYLE=monokai

# PHP
export COMPOSER_HOME=$HOME/.composer
path=("${COMPOSER_HOME}/vendor/bin" "$path[@]")

# Neovim
if type nvim &> /dev/null; then
    export EDITOR=nvim
    alias vim="nvim"
fi

#if [ -f /usr/bin/nvim-qt ]
#then
#  alias gvim="nvim-qt"
#fi

if [ "$TILIX_ID" ] || [ "$VTE_VERSION" ]; then
    source /etc/profile.d/vte*.sh
fi

#if [ -f /usr/bin/pygmentize ]; then
#  alias cat='pygmentize -O style=monokai -f console256 -g'
#fi

# Nix
if [ -d "$HOME/.nix-profile/bin" ]; then
    path=("$HOME/.nix-profile/bin" "$path[@]")
fi

# C#
if [ -d "$HOME/.dotnet/tools" ] ; then
    path=("$HOME/.dotnet/tools" "$path[@]")
fi

# Ruby
if [ -d "$HOME/.local/share/gem/ruby/3.3.0/bin" ] ; then
    path=("$HOME/.local/share/gem/ruby/3.3.0/bin" "$path[@]")
fi

# Snap
if [ -d /snap/bin/ ] ; then
    path=("/snap/bin" "$path[@]")
fi

# NVM
if [ -f /usr/share/nvm/init-nvm.sh ] ; then
    source /usr/share/nvm/init-nvm.sh
fi

# Yarn
if [ -d "$HOME/.yarn/bin" ] ; then
    path=("$HOME/.yarn/bin" "$path[@]")
fi

# Krew
if [ -d "$HOME/.krew" ] ; then
    path=("$HOME/.krew/bin" "$path[@]")
fi

# Go
if [ -d "$HOME/go/bin" ] ; then
    path=("$HOME/go/bin" "$path[@]")
fi

if [ -d "$HOME/Code/Go" ] ; then
    export GOPATH="$HOME/Code/Go"
    path=("$GOPATH/bin" "$path[@]")
fi

# Kind
if type kind &>/dev/null && type podman &>/dev/null; then
    alias kind="systemd-run --setenv=KIND_EXPERIMENTAL_PROVIDER=podman --scope --user kind"
fi

# Rootless Docker
if [ -S "${XDG_RUNTIME_DIR}/docker.sock" ] ; then
    export DOCKER_HOST=unix://${XDG_RUNTIME_DIR}/docker.sock
fi

if [ -d "$HOME/.perl5" ]; then
    PERL_MB_OPT="--install_base $HOME/.perl5"; export PERL_MB_OPT;
    PERL_MM_OPT="INSTALL_BASE=$HOME/.perl5"; export PERL_MM_OPT;
    PERL5LIB="$HOME/.perl5/lib/perl5"; export PERL5LIB;
    PERL_LOCAL_LIB_ROOT="$HOME/.perl5:"; export PERL_LOCAL_LIB_ROOT;

    path=("$HOME/.perl5" "$path[@]")
fi

# Mozilla
if [ "$XDG_SESSION_TYPE" = "wayland" ]; then
    export MOZ_ENABLE_WAYLAND=1
fi

# pnpm
if [ -d "$HOME/.local/share/pnpm" ]; then
    path=("$HOME/.local/share/pnpm" "$path[@]")
    export PNPM_HOME="$HOME/.local/share/pnpm"
fi

# export PNPM_HOME="/home/ben/.local/share/pnpm"
# case ":$PATH:" in
#   *":$PNPM_HOME:"*) ;;
#   *) export PATH="$PNPM_HOME:$PATH" ;;
# esac

# PODMAN
if [ -S "$XDG_RUNTIME_DIR/podman/podman.sock" ] ; then
    DOCKER_HOST="unix://$XDG_RUNTIME_DIR/podman/podman.sock"
fi

# QT
export QT_QPA_PLATFORM=wayland
export QT_QPA_PLATFORMTHEME=qt6ct

# Rust
if [ -d "$HOME/.cargo/bin" ] ; then
    path=("$HOME/.cargo/bin" "$path[@]")
fi

# Jetbrains
if [ -d "$HOME/.local/share/JetBrains/Toolbox/scripts" ] ; then
    path=("$HOME/.local/share/JetBrains/Toolbox/scripts" "$path[@]")
fi

if type vivid &>/dev/null; then
    export LS_COLORS="$(vivid generate catppuccin-mocha)"
fi
